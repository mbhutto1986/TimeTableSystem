package com.mbhutto.database;

import com.mbhutto.entity.Result;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static java.sql.Statement.RETURN_GENERATED_KEYS;

public final class DepartmentDataOperations
{
	private static ResultSet resultSet ;
	private static int[] days = {1, 2, 3, 4, 5};
	private static int[] classes = {1, 2, 3, 4, 5, 6, 7};


	public static long addDepartment(String departmentName, String departmentShortName, int departmentTerms, int departmentSections) throws SQLException, ClassNotFoundException
	{
		long departmentId = -1 ;
		String query = "INSERT INTO departments" +
						"(department_name, department_short_name, department_terms, department_sections)" +
						"VALUES" +
						"(?, ?, ?, ?)" ;

		PreparedStatement insertPreparedStatement = Connect.getConnection().prepareStatement(query , RETURN_GENERATED_KEYS);
		insertPreparedStatement.setString(1,departmentName.trim())			;
		insertPreparedStatement.setString(2,departmentShortName.trim()) 	;
		insertPreparedStatement.setInt(3,departmentTerms)            		;
		insertPreparedStatement.setInt(4,departmentSections)				;
		int inserted = insertPreparedStatement.executeUpdate()							;

		if(inserted >= 1)
		{
			resultSet = insertPreparedStatement.getGeneratedKeys();
			if (resultSet.next())
			{
				departmentId = resultSet.getLong(1);
			}
			resultSet.close();
		}
		insertPreparedStatement.close();
		Connect.getConnection().setAutoCommit(false);
		String insertQuery = "INSERT INTO departments_terms_sections" +
				"(department_id, term_id, section_id, is_time_table_set)" +
				"VALUES" +
				"(?, ?, ?, ?)" ;

		PreparedStatement preparedStatement = Connect.getConnection().prepareStatement(insertQuery , RETURN_GENERATED_KEYS);
		for (int i=1; i<=departmentTerms; i++)
		{

			for (int j=1; j<=departmentSections; j++)
			{
				preparedStatement.setLong(1, departmentId);
				preparedStatement.setInt(2, i);
				preparedStatement.setInt(3, j);
				preparedStatement.setInt(4, 0);
				preparedStatement.addBatch();
				System.out.println(preparedStatement.toString());
			}
		}

		preparedStatement.executeBatch();
		ResultSet res = preparedStatement.getGeneratedKeys();
		long deptTermSecId = -1 ;
		String insertIntoQuery = "INSERT INTO time_table(departments_terms_sections_id, day, class_no) " +
				"VALUE (?, ?, ?)";
		System.out.println("Auto-incremented values of the column ID generated by the current PreparedStatement object: ");
		PreparedStatement insertTimeTablePreparedStatement = Connect.getConnection().prepareStatement(insertIntoQuery);
		while (res.next())
		{
			deptTermSecId = res.getLong(1);
			for(int i=0; i<days.length; i++)
			{
				for(int j=0; j<classes.length; j++)
				{

					if(i==4 && j>4)
					{
						break;
					}

					insertTimeTablePreparedStatement.setLong(1, deptTermSecId);
					insertTimeTablePreparedStatement.setInt(2, days[i]);
					insertTimeTablePreparedStatement.setInt(3, classes[j]);
					insertTimeTablePreparedStatement.addBatch();
				}
			}


			System.out.println("departments_terms_sections:" + res.getLong(1));
		}
		insertTimeTablePreparedStatement.executeBatch();
		Connect.getConnection().commit();
		Connect.getConnection().setAutoCommit(true);
		return departmentId ;
	}

	// Method that delete Subject record from teacher table
	public static int deleteDepartment(String departmentName) throws SQLException, ClassNotFoundException {
		PreparedStatement preparedStatement1 = Connect.getConnection().prepareStatement("Delete from departments where department_name = ?");
		preparedStatement1.setString(1,departmentName)		 ;
		int rows = preparedStatement1.executeUpdate();
		preparedStatement1.close()					 ;
		return rows;
	}

	// Method that search department record in department table
	public static String[] searchDepartment(String departmentName) throws SQLException, ClassNotFoundException
	{
		departmentName = "%" + departmentName + "%" ;
		String query = "SELECT * from departments WHERE department_name LIKE ?" ;
		PreparedStatement preparedStatement1 = Connect.getConnection().prepareStatement(query);
		preparedStatement1.setString(1, departmentName);
		ResultSet resultSet = preparedStatement1.executeQuery();
		resultSet.next() ;
		String[] values = new String[5];
		values[0] = String.valueOf(resultSet.getLong(1))	;
		values[1] = resultSet.getString(2)					;
		values[2] = resultSet.getString(3)					;
		values[3] = String.valueOf(resultSet.getInt(4))					;
		values[4] = String.valueOf(resultSet.getInt(5))	;
		resultSet.close() 			;
		preparedStatement1.close()	;
		return values	 ;
	}

	public static Result viewDepartments() throws SQLException, ClassNotFoundException
	{
		Result result ;
		String query = "SELECT * FROM departments";
    	PreparedStatement preparedStatement = Connect.getConnection().prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		ResultSet resultSet = preparedStatement.executeQuery();

		String records[][];
		int i = 0;

		//make cursor to point to the last row in the ResultSet object
		if (resultSet.last())
		{
			int totalRecords = resultSet.getRow();
			result = new Result(totalRecords);
			System.out.println(totalRecords);
			//make cursor to point to the front of the ResultSet object, just before the first row.
			resultSet.beforeFirst();
			records = new String[totalRecords][5];
			while (resultSet.next())
			{
				records[i][0] = String.valueOf(resultSet.getLong(1))					;
				records[i][1] = resultSet.getString(2)								;
				records[i][2] = resultSet.getString(3)								;
				records[i][3] = String.valueOf(resultSet.getInt(4))					;
				records[i][4] = String.valueOf(resultSet.getInt(5))					;
				i++																				;
			}
			result.setRecords(records);
		}
		else
		{
			result = new Result(0);
		}

		resultSet.close() 			;
		preparedStatement.close()   ;
		return result	 			;
	}

	public static int updateDepartment(long departmentID, String departmentName, String departmentShortName, int departmentTerms, int departmentSections) throws SQLException, ClassNotFoundException
	{
		String query = "UPDATE departments " +
						"SET " +
						"department_name = ?, " +
						"department_short_name = ?, " +
						"department_terms = ?, " +
						"department_sections = ? " +
						"WHERE id = ?" ;
		PreparedStatement updatePreparedStatement = Connect.getConnection().prepareStatement(query) 	;
		updatePreparedStatement.setString(1,departmentName.trim())				;
		updatePreparedStatement.setString(2,departmentShortName.trim())		;
		updatePreparedStatement.setInt(3,departmentTerms)						;
		updatePreparedStatement.setInt(4,departmentSections)					;
		updatePreparedStatement.setLong(5,departmentID)						;
		System.out.println(updatePreparedStatement.toString())								;
		int rows = updatePreparedStatement.executeUpdate() 									;
		updatePreparedStatement.close()														;
		return (rows)																		;
	}
/*
// Next Departmentid  from sequence  used as a primary key
	public static short getNextDepartmentId()throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT deptseq.NEXTVAL from dual");
		ResultSet resultSet	= preparedStatement1.executeQuery();
		resultSet.next();
		short id = resultSet.getShort(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}

	// return count of all Department, to create arry of that size in  String[]getDepartments
	public static int getDepartmentsCount() throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("Select count(dept_key) from department");
		ResultSet resultSet	= preparedStatement1.executeQuery();
		resultSet.next()				;
		int id = resultSet.getInt(1);
		resultSet.close()				;
		preparedStatement1.close()		;
		return id 						;
	}

// Method that select all Departments from Department table, to display, in subjects, makr T.T, View T.T
	public static String[] getDepartments() throws SQLException
	{
		int      record = 0	;
		String[] records   	;
		PreparedStatement preparedStatement1= Connect.conn.prepareStatement("Select dept from department order by dept");
		ResultSet resultSet					= preparedStatement1.executeQuery();
		records = new String[getDepartmentsCount()] 	;
		while ( resultSet.next())
		{
			records[record] = resultSet.getString(1) 	;
			record++									;
		}
		resultSet.close()			;
		preparedStatement1.close()	;

		return records ;
	}

//   Departmentid  from table  using its Name, used in subject table, which contains dept id, but in Gui it shows deptName
	public static short getDepartmentId(String name)throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT dept_key from department where dept=?");
		preparedStatement1.setString(1,name)		 			;
		ResultSet resultSet	= preparedStatement1.executeQuery()	;
		resultSet.next();
		short id = resultSet.getShort(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}

//   DepartmentName  from table  using its Id used in subject table, which contains dept id, but in Gui it shows deptName
	public static String getDepartmentName(int deptId)throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT dept from department where dept_key =?");
		preparedStatement1.setInt(1,deptId)		 			;
		ResultSet resultSet	= preparedStatement1.executeQuery()	;
		resultSet.next();
		String id = resultSet.getString(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}

//   getDepartmentshortName  from table  using its Id used in subject table, Used in displating teachers Time Table.
	public static String getDepartmentShortName(short deptId)throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT shortname from department where dept_key =?");
		preparedStatement1.setShort(1,deptId)		 			;
		ResultSet resultSet	= preparedStatement1.executeQuery()	;
		resultSet.next();
		String id = resultSet.getString(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}


//   Departmentid  from table  using its Name, when ever prtclr dept is selected, at the time of inser subject, assigning class, or view time table.
	public static String getSections(String name)throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT section from department where dept=?");
		preparedStatement1.setString(1,name)		 			;
		ResultSet resultSet	= preparedStatement1.executeQuery()	;
		resultSet.next();
		String id = resultSet.getString(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}

//   Department Max Terms from table  using its Name, when ever prtclr dept is selected, at the time of inser subject, assigning class, or view time table.
	public static byte getMaxTerms(String name)throws SQLException
	{
		PreparedStatement preparedStatement1 = Connect.conn.prepareStatement("SELECT terms from department where dept=?");
		preparedStatement1.setString(1,name)		 			;
		ResultSet resultSet	= preparedStatement1.executeQuery()	;
		resultSet.next();
		byte id = resultSet.getByte(1);
		resultSet.close()			;
		preparedStatement1.close()	;
		return id ;
	}  */
}